package com.zsc.hashtab;

import java.security.PublicKey;
import java.util.Scanner;

/**
 * 哈希表
 *
 * @author zsc
 * @date 2021/4/19 18:51
 */
public class HashTabDemo {
    public static void main(String[] args) {
        //创建哈希表
        HashTab hashTab = new HashTab(7);

        //写一个简单的菜单
        String key = "";
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("add:  添加雇员");
            System.out.println("list: 显示雇员");
            System.out.println("find: 查找雇员");
            System.out.println("del: 删除系统");
            System.out.println("exit: 退出系统");


            key = scanner.next();
            switch (key) {
                case "add":
                    System.out.println("输入id");
                    int id = scanner.nextInt();
                    System.out.println("输入名字");
                    String name = scanner.next();
                    //创建 雇员
                    Emp emp = new Emp(id, name);
                    hashTab.add(emp);
                    break;
                case "list":
                    hashTab.list();
                    break;
                case "find":
                    System.out.println("请输入要查找的id");
                    id = scanner.nextInt();
                    hashTab.findEmpById(id);
                    break;
                case "del":
                    System.out.println("请输入要删除的员工");
                    id = scanner.nextInt();
                    hashTab.delEmpById(id);
                    break;
                case "exit":
                    scanner.close();
                    System.exit(0);
                default:
                    break;
            }
        }

    }
}

//创建HashTab
class HashTab {
    private EmpLinkedList[] empLinkedListArray;
    private int size;   //表示有多少条链表

    public HashTab(int size) {
        this.size = size;
        //初始化empLinkedListArray
        empLinkedListArray = new EmpLinkedList[size];
        //分别初始化每一条链表
        for (int i = 0; i < size; i++) {
            empLinkedListArray[i] = new EmpLinkedList();
        }
    }

    public void add(Emp emp) {
        //根据员工的id，得到该员工应该加入到哪条链表
        int empLinkedListNo = hashFun(emp.id);
        //将emp添加到对应的链表中
        empLinkedListArray[empLinkedListNo].add(emp);
    }

    //遍历所有链表
    public void list() {
        for (int i = 0; i < size; i++) {
            empLinkedListArray[i].list(i);
        }
    }

    //根据输入的id，查找雇员
    public void findEmpById(int id) {
        int empLinkedListNO = hashFun(id);
        Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);
        if (emp != null) {
            System.out.println("在第" + (empLinkedListNO + 1) + "条链表中，找到雇员id=" + id);
        } else {
            System.out.println("在哈希表中，没有找到该雇员");
        }
    }
    //根据输入的id，删除雇员
    public void delEmpById(int id){
        int empLinkedListNO = hashFun(id);
        empLinkedListArray[empLinkedListNO].delEmpById(id);
    }
    //编写一个散列函数，使用一个简单取模法
    public int hashFun(int id) {
        return id % size;
    }
}

class Emp {
    public int id;
    public String name;
    public Emp next;

    public Emp(int id, String name) {
        this.id = id;
        this.name = name;
    }
}

class EmpLinkedList {
    //头指针，指向第一个Emp，因此链表的head是直接指向第一个Emp
    private Emp head;   //默认为null

    //假设添加雇员时，id是自增长的
    public void add(Emp emp) {
        //如果是添加第一个雇员
        if (head == null) {
            head = emp;
            return;
        }
        //如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后
        Emp curEmp = head;
        while (curEmp.next != null) {
            curEmp = curEmp.next;
        }
        curEmp.next = emp;
    }

    //遍历列表
    public void list(int no) {
        if (head == null) {
            System.out.println("第" + (no + 1) + "条链表为空！");
            return;
        }
        System.out.print("第 " + (no + 1) + " 链表的信息为");
        Emp temp = head;
        while (temp != null) {
            System.out.printf(" => id=%d name=%s\t", temp.id, temp.name);
            temp = temp.next;
        }
    }

    //根据id查找雇员
    public Emp findEmpById(int id) {
        //判断链表是否为空
        if (head == null) {
            System.out.println("链表为空！");
            return null;
        }
        //辅助指针
        Emp temp = head;
        while (true) {
            if (temp.id == id) {//找到
                break;//这时curEmp就指向要查找的雇员
            }
            //退出
            if (temp.next == null) {//说明遍历当前链表没有找到该雇员
                temp = null;
                break;
            }
            temp = temp.next;//以后
        }
        return temp;
    }

    //根据id删除雇员
    public void delEmpById(int id) {
        //判断链表是否为空
        if (head == null) {
            System.out.println("链表为空，无法删除");
            return;
        }
        if (head.id == id) {
            head = head.next;
            return;
        }
        //辅助指针
        Emp temp = head;
        while (true) {
            if (temp.next == null) {
                System.out.println("找不到该节点！");
                return;
            }
            if (temp.next.id == id) {
                temp.next = temp.next.next;
                return;
            }
            temp = temp.next;
        }
    }
}